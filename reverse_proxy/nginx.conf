events{

}
 
http{
	upstream dynamic { server 127.0.0.1; }

	# Listens for HTTP, rewrites to HTTPS
	server {
		listen 80 default_server;
		server_name _;
		return 301 https://$host$request_uri;
	}

    # Listens for HTTPS and proxies the request to port 3300
	server {
		listen 3030 ssl;
		server_name _;
		ssl_certificate selfsigned_cert.crt;
		ssl_certificate_key private_key.key;
		ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_prefer_server_ciphers on;
		ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;

		location / {
			proxy_pass http://authservice:3300/;
			proxy_http_version 1.1;
			proxy_cache_bypass $http_upgrade;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_pass_header Server;
		}
	}

	server {
		listen 3031 ssl;
		server_name _;
		ssl_certificate selfsigned_cert.crt;
		ssl_certificate_key private_key.key;
		ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_prefer_server_ciphers on;
		ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;

		location / {
			proxy_pass http://gmailservice:8081/;
			proxy_http_version 1.1;
			proxy_cache_bypass $http_upgrade;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_pass_header Server;
		}
	}
	server {
		listen 3032 ssl;
		server_name _;
		ssl_certificate selfsigned_cert.crt;
		ssl_certificate_key private_key.key;
		ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_prefer_server_ciphers on;
		ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;

		location / {
			proxy_pass http://userapiservice:8082/;
			proxy_http_version 1.1;
			proxy_cache_bypass $http_upgrade;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_pass_header Server;
		}
	}
}  
